//======================================================================
// aes.a65
// -------
// An implementation of the AES-128 block cipher (NIST FIPS-197) for
// the MOS 6502/6510 CPU. The implementation is aimed at low
// cycles/round.
//
// Limitation:
// Currently will only do encipher operation, but one would use
// a cipher mode that provides deciphering outside of the AES itself.
// Key expansion is currently not being implemented.
//
// Implementation note:
// Key and state are stored in zero page using addresses used
// by the BASIC interpreter. Add code to save/restore these values
// before calling the code if BASIC operation is something you
// care about.
//
// State is stored as sequence of columns.
//
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

#import "display_macros.a65"


//------------------------------------------------------------------
// Basic start code.
//------------------------------------------------------------------
.pc = $0801     "Basic uppstart"
	        :BasicUpstart(start)


//------------------------------------------------------------------
//------------------------------------------------------------------
// Main program implements a few tests by calling the AES code
.pc = $1000     "Main code"
start:
                sei
                inc $d020
                lda $d018
                ora #$02
                sta $d018
                jsr clear_screen
                jsr save_zp
                jsr init_aes
                jsr aes_encipher
                jsr restore_zp
                cli
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
clear_screen:
                ldx #$00
                lda #$20
l1:             sta $0400,x
                sta $0500,x
                sta $0600,x
                sta $06e8,x
                dex
                bne l1
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
set_state:
                lda #$41
                ldy #$00
s1:             sta state,y
                adc #$01
                iny
                cpy #$10
                bne s1
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
save_zp:
                ldx #$00
save1:          lda exp_keys, x
                sta backup_zp_exp_keys, x
                inx
                cpx #$b0
                bne save1

                ldx #$00
save2:          lda state, x
                sta backup_zp_state, x
                inx
                cpx #$10
                bne save2
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
restore_zp:
                ldx #$00
restore1:
                lda backup_zp_exp_keys, x
                sta exp_keys, x
                inx
                cpx #$b0
                bne restore1

                ldx #$00
restore2:
                lda backup_zp_state, x
                sta state, x
                inx
                cpx #$10
                bne restore2
                rts

//------------------------------------------------------------------
// init_aes
// Copy expanded keys into the exp_keys area.
// Write the plaintext to the state in correct column order.
//------------------------------------------------------------------
init_aes:
                ldx #$00
init1:
                lda fips_keys, x
                sta exp_keys, x
                inx
                cpx #$b0
                bne init1

                ldx #$00
init2:
                lda plaintext + 0
                sta state + 0
                lda plaintext + 1
                sta state + 4
                lda plaintext + 2
                sta state + 8
                lda plaintext + 3
                sta state + 12

                lda plaintext + 4
                sta state + 1
                lda plaintext + 5
                sta state + 5
                lda plaintext + 6
                sta state + 9
                lda plaintext + 7
                sta state + 13

                lda plaintext + 8
                sta state + 2
                lda plaintext + 9
                sta state + 6
                lda plaintext + 10
                sta state + 10
                lda plaintext + 11
                sta state + 14

                lda plaintext + 12
                sta state + 3
                lda plaintext + 13
                sta state + 7
                lda plaintext + 14
                sta state + 11
                lda plaintext + 15
                sta state + 15
                rts


//------------------------------------------------------------------
// aes_encipher
// Perform one AES-128 given a block of data written into the
// state and a key written into the key addresses.
//------------------------------------------------------------------

.pc = $3000     "AES Encipher"
aes_encipher:
                lda #$00
                sta rctr
                sta keyptr

                :print_curr_key_ptr($0400)
                :print_state_matrix($0430)
                jsr addroundkey
                :print_state_matrix($0440)
                :print_curr_key_ptr($0406)
                rts

                jsr addroundkey
                :print_curr_key($040c)

round_loop:
                jsr subbytes
                jsr shiftrows
                jsr mixcolumns
                :print_state_matrix($0430)
                :print_curr_key($0410)
                jsr addroundkey
                :print_curr_key($0416)
                :print_state_matrix($043d)
//                :print_string(aes_state_str, 10, $0410)
//
                rts


//------------------------------------------------------------------
// SubBytes
// Replace each byte in the state with a byte in the S-box
// pointed to by the state byte value.
//
// Cycle calc: 10 * 16 + 6 = 166 cycles.
//------------------------------------------------------------------
subbytes:
                :sbyte(state + 0)
                :sbyte(state + 1)
                :sbyte(state + 2)
                :sbyte(state + 3)
                :sbyte(state + 4)
                :sbyte(state + 5)
                :sbyte(state + 6)
                :sbyte(state + 7)
                :sbyte(state + 8)
                :sbyte(state + 9)
                :sbyte(state + 10)
                :sbyte(state + 11)
                :sbyte(state + 12)
                :sbyte(state + 13)
                :sbyte(state + 14)
                :sbyte(state + 15)
                rts              // 6 cycles


//------------------------------------------------------------------
// ShiftRows
// Rotate the bytes in the rows of the matrix 0..3 steps left.
// 30 + 36 + 30 + 6 = 102 cycles.
//------------------------------------------------------------------
shiftrows:
                // Second row one step left.
                // 10 * 3 = 30 cycles.
                lda state + 4
                sta btmp
                lda state + 5
                sta state + 4
                lda state + 6
                sta state + 5
                lda state + 7
                sta state + 6
                lda btmp
                sta state + 7

                // Third row two steps left.
                // 12 * 3 = 36 cycles
                lda state + 8
                sta btmp
                lda state + 9
                sta btmp + 1
                lda state + 10
                sta state + 8
                lda state + 11
                sta state + 9
                lda btmp
                sta state + 10
                lda btmp + 1
                sta state + 11

                // Fourth row three steps left.
                // Same as one step right.
                // 10 * 3 = 30 cycles
                lda state + 15
                sta btmp
                lda state + 14
                sta state + 15
                lda state + 13
                sta state + 14
                lda state + 12
                sta state + 13
                lda btmp
                sta state + 12
                rts


//------------------------------------------------------------------
// MixColumns
// GF mult mix columns together.
//------------------------------------------------------------------
mixcolumns:
                mixc(state + 0, state + 4, state + 8,  state + 12)
                mixc(state + 1, state + 5, state + 9,  state + 13)
                mixc(state + 2, state + 6, state + 10, state + 14)
                mixc(state + 3, state + 7, state + 11, state + 15)
                rts


//------------------------------------------------------------------
// AddRoundKey
// XOR mix a given round key with the round state.
// 3 + 16 * 10 + 13 = 176 cycles
//------------------------------------------------------------------
addroundkey:
                ldx keyptr                              // 3 cycles
                :eorbyte(state + 0,  exp_keys + 0)
                :eorbyte(state + 1,  exp_keys + 1)
                :eorbyte(state + 2,  exp_keys + 2)
                :eorbyte(state + 3,  exp_keys + 3)
                :eorbyte(state + 4,  exp_keys + 4)
                :eorbyte(state + 5,  exp_keys + 5)
                :eorbyte(state + 6,  exp_keys + 6)
                :eorbyte(state + 7,  exp_keys + 7)
                :eorbyte(state + 8,  exp_keys + 8)
                :eorbyte(state + 9,  exp_keys + 9)
                :eorbyte(state + 10, exp_keys + 10)
                :eorbyte(state + 11, exp_keys + 11)
                :eorbyte(state + 12, exp_keys + 12)
                :eorbyte(state + 13, exp_keys + 13)
                :eorbyte(state + 14, exp_keys + 14)
                :eorbyte(state + 15, exp_keys + 15)
                txa
                clc
                adc #$10                                // 2 cycles
                sta keyptr                              // 3 cycles
                rts                                     // 6 cycles


//------------------------------------------------------------------
// AES S-Box.
//------------------------------------------------------------------
.pc = $4000     "Tables"
sbox:
.byte $63, $7c, $77, $7b, $f2, $6b, $6f, $c5
.byte $30, $01, $67, $2b, $fe, $d7, $ab, $76
.byte $ca, $82, $c9, $7d, $fa, $59, $47, $f0
.byte $ad, $d4, $a2, $af, $9c, $a4, $72, $c0
.byte $b7, $fd, $93, $26, $36, $3f, $f7, $cc
.byte $34, $a5, $e5, $f1, $71, $d8, $31, $15
.byte $04, $c7, $23, $c3, $18, $96, $05, $9a
.byte $07, $12, $80, $e2, $eb, $27, $b2, $75
.byte $09, $83, $2c, $1a, $1b, $6e, $5a, $a0
.byte $52, $3b, $d6, $b3, $29, $e3, $2f, $84
.byte $53, $d1, $00, $ed, $20, $fc, $b1, $5b
.byte $6a, $cb, $be, $39, $4a, $4c, $58, $cf
.byte $d0, $ef, $aa, $fb, $43, $4d, $33, $85
.byte $45, $f9, $02, $7f, $50, $3c, $9f, $a8
.byte $51, $a3, $40, $8f, $92, $9d, $38, $f5
.byte $bc, $b6, $da, $21, $10, $ff, $f3, $d2
.byte $cd, $0c, $13, $ec, $5f, $97, $44, $17
.byte $c4, $a7, $7e, $3d, $64, $5d, $19, $73
.byte $60, $81, $4f, $dc, $22, $2a, $90, $88
.byte $46, $ee, $b8, $14, $de, $5e, $0b, $db
.byte $e0, $32, $3a, $0a, $49, $06, $24, $5c
.byte $c2, $d3, $ac, $62, $91, $95, $e4, $79
.byte $e7, $c8, $37, $6d, $8d, $d5, $4e, $a9
.byte $6c, $56, $f4, $ea, $65, $7a, $ae, $08
.byte $ba, $78, $25, $2e, $1c, $a6, $b4, $c6
.byte $e8, $dd, $74, $1f, $4b, $bd, $8b, $8a
.byte $70, $3e, $b5, $66, $48, $03, $f6, $0e
.byte $61, $35, $57, $b9, $86, $c1, $1d, $9e
.byte $e1, $f8, $98, $11, $69, $d9, $8e, $94
.byte $9b, $1e, $87, $e9, $ce, $55, $28, $df
.byte $8c, $a1, $89, $0d, $bf, $e6, $42, $68
.byte $41, $99, $2d, $0f, $b0, $54, $bb, $16

gm2_table:
.byte $00, $02, $04, $06, $08, $0a, $0c, $0e
.byte $10, $12, $14, $16, $18, $1a, $1c, $1e
.byte $20, $22, $24, $26, $28, $2a, $2c, $2e
.byte $30, $32, $34, $36, $38, $3a, $3c, $3e
.byte $40, $42, $44, $46, $48, $4a, $4c, $4e
.byte $50, $52, $54, $56, $58, $5a, $5c, $5e
.byte $60, $62, $64, $66, $68, $6a, $6c, $6e
.byte $70, $72, $74, $76, $78, $7a, $7c, $7e
.byte $80, $82, $84, $86, $88, $8a, $8c, $8e
.byte $90, $92, $94, $96, $98, $9a, $9c, $9e
.byte $a0, $a2, $a4, $a6, $a8, $aa, $ac, $ae
.byte $b0, $b2, $b4, $b6, $b8, $ba, $bc, $be
.byte $c0, $c2, $c4, $c6, $c8, $ca, $cc, $ce
.byte $d0, $d2, $d4, $d6, $d8, $da, $dc, $de
.byte $e0, $e2, $e4, $e6, $e8, $ea, $ec, $ee
.byte $f0, $f2, $f4, $f6, $f8, $fa, $fc, $fe
.byte $1b, $19, $1f, $1d, $13, $11, $17, $15
.byte $0b, $09, $0f, $0d, $03, $01, $07, $05
.byte $3b, $39, $3f, $3d, $33, $31, $37, $35
.byte $2b, $29, $2f, $2d, $23, $21, $27, $25
.byte $5b, $59, $5f, $5d, $53, $51, $57, $55
.byte $4b, $49, $4f, $4d, $43, $41, $47, $45
.byte $7b, $79, $7f, $7d, $73, $71, $77, $75
.byte $6b, $69, $6f, $6d, $63, $61, $67, $65
.byte $9b, $99, $9f, $9d, $93, $91, $97, $95
.byte $8b, $89, $8f, $8d, $83, $81, $87, $85
.byte $bb, $b9, $bf, $bd, $b3, $b1, $b7, $b5
.byte $ab, $a9, $af, $ad, $a3, $a1, $a7, $a5
.byte $db, $d9, $df, $dd, $d3, $d1, $d7, $d5
.byte $cb, $c9, $cf, $cd, $c3, $c1, $c7, $c5
.byte $fb, $f9, $ff, $fd, $f3, $f1, $f7, $f5
.byte $eb, $e9, $ef, $ed, $e3, $e1, $e7, $e5

gm3_table:
.byte $00, $03, $06, $05, $0c, $0f, $0a, $09
.byte $18, $1b, $1e, $1d, $14, $17, $12, $11
.byte $30, $33, $36, $35, $3c, $3f, $3a, $39
.byte $28, $2b, $2e, $2d, $24, $27, $22, $21
.byte $60, $63, $66, $65, $6c, $6f, $6a, $69
.byte $78, $7b, $7e, $7d, $74, $77, $72, $71
.byte $50, $53, $56, $55, $5c, $5f, $5a, $59
.byte $48, $4b, $4e, $4d, $44, $47, $42, $41
.byte $c0, $c3, $c6, $c5, $cc, $cf, $ca, $c9
.byte $d8, $db, $de, $dd, $d4, $d7, $d2, $d1
.byte $f0, $f3, $f6, $f5, $fc, $ff, $fa, $f9
.byte $e8, $eb, $ee, $ed, $e4, $e7, $e2, $e1
.byte $a0, $a3, $a6, $a5, $ac, $af, $aa, $a9
.byte $b8, $bb, $be, $bd, $b4, $b7, $b2, $b1
.byte $90, $93, $96, $95, $9c, $9f, $9a, $99
.byte $88, $8b, $8e, $8d, $84, $87, $82, $81
.byte $9b, $98, $9d, $9e, $97, $94, $91, $92
.byte $83, $80, $85, $86, $8f, $8c, $89, $8a
.byte $ab, $a8, $ad, $ae, $a7, $a4, $a1, $a2
.byte $b3, $b0, $b5, $b6, $bf, $bc, $b9, $ba
.byte $fb, $f8, $fd, $fe, $f7, $f4, $f1, $f2
.byte $e3, $e0, $e5, $e6, $ef, $ec, $e9, $ea
.byte $cb, $c8, $cd, $ce, $c7, $c4, $c1, $c2
.byte $d3, $d0, $d5, $d6, $df, $dc, $d9, $da
.byte $5b, $58, $5d, $5e, $57, $54, $51, $52
.byte $43, $40, $45, $46, $4f, $4c, $49, $4a
.byte $6b, $68, $6d, $6e, $67, $64, $61, $62
.byte $73, $70, $75, $76, $7f, $7c, $79, $7a
.byte $3b, $38, $3d, $3e, $37, $34, $31, $32
.byte $23, $20, $25, $26, $2f, $2c, $29, $2a
.byte $0b, $08, $0d, $0e, $07, $04, $01, $02
.byte $13, $10, $15, $16, $1f, $1c, $19, $1a

// Screen Strings.
aes_state_str:
.text "AES state:"

subbytes_str:
.text "SubBytes:"

shiftrows_str:
.text "ShiftRows:"

mixcolumns_str:
.text "MixColumns:"

addroundkey_str:
.text "AddRoundKey:"

hexchars:
.text "0123456789abcdef"


plaintext:
.byte $32, $43, $f6, $a8, $88, $5a, $30, $8d, $31, $31, $98, $a2, $e0, $37, $07, $34


ciphertext:
.byte $39, $25, $84, $1d, $02, $dc, $09, $fb, $dc, $11, $85, $97, $19, $6a, $0b, $32


fips_keys:
.byte $2b, $7e, $15, $16, $28, $ae, $d2, $a6, $ab, $f7, $15, $88, $09, $cf, $4f, $3c
.byte $a0, $fa, $fe, $17, $88, $54, $2c, $b1, $23, $a3, $39, $39, $2a, $6c, $76, $05
.byte $f2, $c2, $95, $f2, $7a, $96, $b9, $43, $59, $35, $80, $7a, $73, $59, $f6, $7f
.byte $3d, $80, $47, $7d, $47, $16, $fe, $3e, $1e, $23, $7e, $44, $6d, $7a, $88, $3b
.byte $ef, $44, $a5, $41, $a8, $52, $5b, $7f, $b6, $71, $25, $3b, $db, $0b, $ad, $00
.byte $d4, $d1, $c6, $f8, $7c, $83, $9d, $87, $ca, $f2, $b8, $bc, $11, $f9, $15, $bc
.byte $6d, $88, $a3, $7a, $11, $0b, $3e, $fd, $db, $f9, $86, $41, $ca, $00, $93, $fd
.byte $4e, $54, $f7, $0e, $5f, $5f, $c9, $f3, $84, $a6, $4f, $b2, $4e, $a6, $dc, $4f
.byte $ea, $d2, $73, $21, $b5, $8d, $ba, $d2, $31, $2b, $f5, $60, $7f, $8d, $29, $2f
.byte $ac, $77, $66, $f3, $19, $fa, $dc, $21, $28, $d1, $29, $41, $57, $5c, $00, $6e
.byte $d0, $14, $f9, $a8, $c9, $ee, $25, $89, $e1, $3f, $0c, $c8, $b6, $63, $0c, $a6


// This is where we store the backup of the zero page we use
// for state and expanded keys.
backup_zp_exp_keys:
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00


backup_zp_state:
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00



//------------------------------------------------------------------
// Labels
//------------------------------------------------------------------
// State is 16 bytes in size.
.label state = $30

// Expanded key is 11*16 bytes in size
// So will span from $40 to $f0
.label exp_keys = $40

// Round counter
.label rctr = $f8

// Key pointer
.label keyptr = $f9

// Block temp values. 6 bytes in size ($fa .. $ff).
.label btmp = $fa


//------------------------------------------------------------------
// Macros.
//------------------------------------------------------------------
.macro sbyte(byte)
{
                ldy byte                // 3 cycles
                lda sbox, y             // 4 cycles
                sta byte                // 3 cycles
}


// XOR the contents of the keybyte with sbyte. The result is
// stored in sbyte.
// Note: Assumes that x reg has been set.
.macro eorbyte(sbyte, keybyte)
{
                lda keybyte, x          // 4 cycles
                eor sbyte               // 3 cycles
                sta sbyte               // 3 cycles
}


// Galois Multiplication by two.
.macro gm2(byte, res)
{
                ldx byte
                lda gm2_table, x
                sta res
}


// Galois mult by three.
.macro gm3(byte, res)
{
                ldx byte
                lda gm3_table, x
                sta res
}


// mixc. Mixes four bytes to get a new byte.
// Note: Will modify btmp and btmp+1 as part of processing.
.macro mixb(b0, b1, b2, b3, dest)
{
                :gm2(b0, btmp)
                :gm3(b1, btmp + 1)
                lda btmp
                eor btmp + 1
                eor b2
                eor b3
                sta dest
}


// mixc. Mixes four bytes to get four new bytes.
// Note: Will modify btmp..btmp+5 as part of processing.
.macro mixc(b0, b1, b2, b3)
{
                :mixb(b0, b1, b2, b3, btmp + 2)
                :mixb(b1, b2, b3, b0, btmp + 3)
                :mixb(b2, b3, b0, b1, btmp + 4)
                :mixb(b3, b0, b1, b2, btmp + 5)
                lda btmp + 2
                sta b0
                lda btmp + 3
                sta b1
                lda btmp + 4
                sta b2
                lda btmp + 5
                sta b3
}

//======================================================================
// aes.a65
//======================================================================
